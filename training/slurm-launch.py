# slurm-launch.py
# Usage:
# python slurm-launch.py --exp-name test --num-nodes 3 --num-gpus 'T4:8' 
#   --load-env 'module load GCC/10.2.0  CUDA/11.1.1  OpenMPI/4.0.5 TensorFlow/2.4.1; pip install TensorboardX' 
#   --command 'python test_ray.py'

import argparse
import subprocess
import sys
import time
import os

template_file = 'slurm-template.sh'
JOB_NAME = '${JOB_NAME}'
NUM_NODES = '${NUM_NODES}'
NUM_GPUS_PER_NODE = '${NUM_GPUS_PER_NODE}'
PARTITION_OPTION = '${PARTITION_OPTION}'
COMMAND_PLACEHOLDER = '${COMMAND_PLACEHOLDER}'
GIVEN_NODE = '${GIVEN_NODE}'
LOAD_ENV = '${LOAD_ENV}'
WALL_TIME = '${WALL_TIME}'
ACCOUNT = '${ACCOUNT}'
SINGULARITY_IMG = '${SINGULARITY_IMG}'
BIND_PATHS = '${BIND_PATHS}'

if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument(
        '--exp-name',
        type=str,
        required=True,
        help='The job name and path to logging file (exp_name.log).')
    parser.add_argument(
        '--num-nodes',
        '-n',
        type=int,
        default=1,
        help='Number of nodes to use.')
    parser.add_argument(
        '--node',
        '-w',
        type=str,
        help='The specified nodes to use. Same format as the '
        'return of \'sinfo\'. Default: \'\'.')
    parser.add_argument(
        '--num-gpus',
        type=str,
        default='T4:8',
        help='Number of GPUs to use in each node. (Default: \'T4:8\'). When allocating multiple nodes,'
        'Alvis requires you to request all the GPUs on these nodes, i.e. you can\'t request 5'
        'nodes with a single T4 GPU each, you must request all 8 T4 GPUs.'
        'See https://www.c3se.chalmers.se/about/Alvis/#hardware for the different node configurations available.')
    parser.add_argument(
        '-t',
        type=str,
        default='0-5:00:00',
        help='Time allocated for the SLURM job on the format \'D-HH:MM:MM\'. \
            Defaults to \'0-5:00:00\'.')
    parser.add_argument(
        '--singularity_img',
        type=str,
        required=True,
        help='Path to the singularity image used when runing the command.')
    parser.add_argument(
        '--bind-paths',
        type=str,
        required=False,
        help='Directories to be mapped from your host system to the \
            singularity container, allowing you to read and write data.')
    parser.add_argument(
        '--partition',
        '-p',
        type=str,
    )
    parser.add_argument(
        '--command',
        type=str,
        required=True,
        help='The command you wish to execute. For example: '
        ' --command \'python test.py\'. '
        'Note that the command must be a string.')
    parser.add_argument(
        '--account',
        type=str,
        required=True,
        help='The slurm account to use')
    args = parser.parse_args()

    if args.node:
        # assert args.num_nodes == 1
        node_info = '#SBATCH -w {}'.format(args.node)
    else:
        node_info = ''

    job_name = '{}_{}'.format(args.exp_name,
                              time.strftime('%m%d-%H%M', time.localtime()))

    partition_option = '#SBATCH --partition={}'.format(
        args.partition) if args.partition else ''

    # ===== Modified the template script =====
    with open(template_file, 'r') as f:
        text = f.read()
    text = text.replace(JOB_NAME, job_name)
    text = text.replace(NUM_NODES, str(args.num_nodes))
    text = text.replace(NUM_GPUS_PER_NODE, str(args.num_gpus))
    text = text.replace(PARTITION_OPTION, partition_option)
    text = text.replace(COMMAND_PLACEHOLDER, str(args.command))
    text = text.replace(SINGULARITY_IMG, str(args.singularity_img))
    text = text.replace(GIVEN_NODE, node_info)
    text = text.replace(ACCOUNT, str(args.account))
    text = text.replace(WALL_TIME, str(args.t))
    bind_paths = '-B ' + str(args.bind_paths) if args.bind_paths else ''
    text = text.replace(BIND_PATHS, bind_paths)
    text = text.replace(
        '# THIS FILE IS A TEMPLATE AND IT SHOULD NOT BE DEPLOYED TO '
        'PRODUCTION!',
        '# THIS FILE IS AUTOMATICALLY GENERATED FROM TEMPLATE AND SHOULD BE '
        'RUNNABLE!')

    # ===== Create script dir =====
    script_dir = os.path.join('outputs', job_name)
    os.mkdir(script_dir)

    # ===== Save the script =====
    script_file = os.path.join(script_dir, '{x}.sh'.format(x=job_name))
    with open(script_file, 'w') as f:
        f.write(text)
    
    # ===== Submit the job =====
    print('Starting to submit job!')
    subprocess.Popen(['sbatch', script_file])
    print()
    print(f'Job submitted! Script file is at: <{script_file}>. Log file is at: <outputs/{job_name}/{job_name}.log>')
    sys.exit(0)
